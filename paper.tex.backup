\documentclass{llncs}
\usepackage[ruled,vlined,linesnumbered]{algorithm2e}
\usepackage{color,graphicx,epstopdf,changepage,amsmath,multirow}
\usepackage[justification=centering]{caption}
\SetAlgoCaptionSeparator{.\space}
\renewcommand\AlCapFnt{\normalfont\scshape}
\setlength{\algomargin}{0.7cm}

\title{Comprehensive Quality Awareness Automated Semantic Web Service Composition}
\author{Chen Wang, Hui Ma, Aaron Chen and Sven Hartmann}
\institute{School of Engineering and Computer Science,
\\Victoria University of Wellington, New Zealand \\
Email: \{chen.wang, hui.ma, aaron.chen\}@ecs.vuw.ac.nz}

\usepackage[pdfauthor={\@author}, pdftitle={\@title}]{hyperref}
\makeatother

%\providecommand{\e}[1]{\ensuremath{\times 10^{#1}}}
\vspace{-1.5cm}

\begin{document}
\maketitle
\begin{abstract}
Semantic web service composition has been a prevailing research area in recent years. There are two major challenges faced by researchers, semantic matchmaking and Quality of Service (QoS) optimisation. Semantic matchmaking aims to discover interoperable web services that can interact with each other by their resources described semantically. QoS optimisation aims to optimise the non-functional requirements of service users, e.g., minimum cost, maximal reliability. Many scholars have looked into QoS optimisation problems in QoS-aware web service composition, applying AI planning and Evolutionary Computation techniques. To meet users' requirements, one often needs to consider both semantic matchmaking quality and QoS simultaneously. Existing works on web service composition focus mainly on one single type of requirements. Therefore, we propose a general comprehensive quality model considering semantic matchmaking quality and QoS simultaneously with an aim of achieving a more desirable trade-off in consideration of both sides. Further more, we develop a PSO-based service composition approach with explicit support for the comprehensive model, where PSO optimise a queue of task related services that is decoded into composition solutions. We compare proposed comprehensive quality model with one promising QoS model, and also compare the effectiveness of PSO-based method with one recent GP-based method using comprehensive quality model.

\end{abstract}
\section{Introduction}\label{introduction}

\textit{Web service composition} pertains to a chain of multiple web services to provide a value-added composition service that accommodates customers' arbitrarily complex requirements. This application is developed by integrating interoperable and collaborative functionalities over heterogeneous systems. Due to the increasing number of large-scale enterprise applications, the number of Web services has increased substantially and unprecedentedly. Therefore, \textit{manual and semi-automated web service compositions} are considered to be less efficient while \textit{automated web service composition} demands less human intervention, less time consumption, and high productivity.

Two most notable challenges for web service composition are ensuring interoperability of services and achieving Quality of Service (QoS) optimisation \cite{fensel2011semantic}. \textit{Interoperability} of web services presents challenge in syntactic and semantic dimensions. The syntactic dimension is covered by the XML-based technologies (such as $WSDL$, $SOAP$). The semantic dimension enables a better understanding and collaboration through ontology-based semantics \cite{o2005review}. There are many ontology languages and formats for semantic service descriptions, such as OWL-S, WSML, and SAWSDL \cite{petrie2016web}, which make ``machine understanding'' possible through identifying and matching semantic similarities in input/output parameters of web services. The second challenge is related to finding optimised solutions in QoS. This problem gives birth to \textit{QoS-aware service composition} that aims to find composition solutions associated with a single optimised QoS value.

Existing works on service composition focus mainly on addressing only one challenge above. Among these works, huge efforts have been devoted to optimise the quality of compositions under a pre-defined abstract workflow. This is generally considered as a \textit{semi-automated Web service composition} approach \cite{bahadori2009optimal,parejo2008qos}. Meanwhile, many research works consider the NP-hard problem of generating a composition plan automatically in discovering and selecting suitable web services \cite{moghaddam2014service}. \textit{Semantic web services composition} is distinguished from the syntactic service composition, the resources of semantic web services are described semantically to enable a better interoperability for chaining web services. In the past few years, substantial works have been done on semantic web service composition \cite{bansal2016generalized,boustil2014semantic,mier2015integrated}. However, few works have enabled truely automatic semantic web service composition, where both QoS and quality of semantic match making will be optimised simultaneously to achieve a desired balance.

The overall goal of this paper is to \textit{develop a general comprehensive approach to automated QoS-aware semantic web service composition that satisfactorily optimises both QoS and semantic matchmaking quality}. Particularly, this paper extends existing works of QoS-aware service composition by considering jointly optimise QoS and semantic matchmaking quality based on our proposed comprehensive quality model. Particle Swarm Optimisation (PSO) has shown its promise in searching for near-optimised service composition solutions \cite{da2016particle}. We will propose a PSO-based service composition approach with explicit support for our proposed quality model. We will achieve three objectives in this work as follows:

\begin{enumerate}
 \item To propose a general comprehensive quality model that addresses QoS and semantic matchmaking quality simultaneously to achieve a desirable balance on both sides.
  
 \item To propose a PSO-based service composition approach that utilises the proposed comprehensive quality model. To do that we optimise a queue of web services by evaluating the comprehensive quality of its decoded representations.
  
 \item To address a desirable balance that can be achieved using our comprehensive quality model, we conduct experiments to compare our proposed model with one widely used QoS model using PSO-based approach. In addition, to evaluate the effectiveness of our PSO-based approach,  we also compare one recent GP approach \cite{ma2015hybrid} with our PSO-based approach using our proposed model. Both comparisons utilise benchmark datasets from Web Services Challenge 2009 (WSC09) \cite{kona2009wsc} 
  
\end{enumerate}

\section{Related Work} \label{relatedWork}
Substantial works on web service composition focus on either semantic web service composition \cite{boustil2014semantic,bansal2016generalized,mier2015integrated} or QoS-aware web service composition \cite{gupta2015optimization,qi2010combining,ma2015hybrid,da2016particle,da2015graphevol,yu2013adaptive}, However, only a few researchers address both semantic matchmaking quality and QoS requirements for web service composition problems. To the best of our knowledge, \cite{fanjiang2014semantic,lecue2009optimizing,pop2009immune} reported some attempts on service composition that considers both aspects.

Semantic web service composition \cite{bansal2016generalized,boustil2014semantic,mier2015integrated} captures the semantic description of web services' parameters using some kind of logic (e.g., description logic) that ensuring the interoperability of web services, where the number of web services or length of a graph representation for web service composition is minimised to reach the optimised composition solutions. However, this evaluation approach does not guarantee an optimised QoS of composition solutions.

QoS-aware web service composition is studied using traditional approaches or Evolutionary Computation (EC) techniques for finding near-optimised solutions. Qi et al. \cite{qi2010combining} propose a heuristic service composition method, named LOEM (Local Optimisation and Enumeration Method), where a small number of promising candidates related to each task are considered by local selection, and composition solutions are enumerated to reach the near-to-optimal QoS. However, there exists a scalability problem for the enumeration technique. EC techniques are used to automatically generate solutions with optimal QoS, which is considered to a NP-hard problem. Gupta et al. \cite{gupta2015optimization} employ a modified Genetic Algorithm (GA) using a binary string as an individual, which demands to be decoded into composition solutions. Genetic Programming (GP) are used by \cite{yu2013adaptive} to find optimal solutions, which is reached by penalising infeasible solutions using a fitness function. A hybrid approach employs both greedy search algorithm and GP introduced in \cite{ma2015hybrid} to generate solutions that are functionally correct. In particularly, greedy search techniques have been used to generate directed acyclic graphs (DAGs) as composition solutions that is further transferred to tree structures for initialisation and mutation. To eliminating the transformation process from DAGs, a promising GraphEvol is proposed in \cite{da2015graphevol}, where web service composition are in a form of DAGs employing Graph-based evolutionary operators like crossover and mutation. An indirect PSO-based approach was introduced in \cite{da2016particle}. An optimised queue is used as an indirect representation that is decoded into a DAG-based solution. These QoS-aware approaches \cite{gupta2015optimization,qi2010combining,ma2015hybrid,da2016particle,da2015graphevol,yu2013adaptive} do not consider semantic matchmaking quality, which could lead to too specific outputs produced by the selected services, and this finding is supported by our first comparison experiment.

Only a few works \cite{fanjiang2014semantic,lecue2009optimizing,pop2009immune} consider both semantic matchmaking quality and QoS simultaneously. Lecue et al. \cite{lecue2009optimizing} propose a semi-automated web service composition using GA to encode a given abstract service workflow, where the semantic matchmaking quality is measured through evaluating the quality of semantic links that require a complete and formal definition of ontology in Description Logic. This evaluation model takes huge cost and time for the domain experts to establish required ontology. Another GA-based approach \cite{fanjiang2014semantic} utilise process description language to encode pre-stored cases-based workflows, where workable services are composed to complete this workflow. The work \cite{pop2009immune} is an automated immune-inspired web service composition approach, where an indirect representation that a binary alphabet is used to encode a planning graph. However, this composition method is only evaluated on a set of scenarios.

In summary, despite a large number of approaches for semantic web service composition and QoS-aware service composition approaches, there is a lack of a fully automated semantic web service composition approach to optimise semantic matchmaking quality and QoS simultaneously, and this approach must be tested utilising benchmark dataset. Therefore, we first propose a general comprehensive quality model that aims to achieve a better semantic matchmaking quality with a slight trade-off in QoS, and then we propose an automated PSO-based approach with explicit support for the comprehensive model to find optimal service compositions.

\section{Motivation and Problem Description}\label{Motivation and Problem Description}
\subsection{Motivation}\label{Motivation}

Our goal in this paper is to develop a PSO-based approach that can automatically produce composition services in the form of graph-based representation (e.g. DAG). The nodes in the DAG represent component services. On the other hand, the edge that connects any two component services in the DAG, e.g. $S_1->S_2$, indicates that the output information from service S1 will subsequently serve as the input information for service S2. Apparently, such output and input information must semantically match to ensure the correct execution of the DAG. Moreover, the overall service inputs and outputs associated with the DAG must satisfy the composition requirements provided by users.
 
In practice, many different DAGs can meet the given requirements but differ significantly in terms of QoS and semantic matchmaking quality. For example, in the classical travel planning context, during the process of building a DAG, a component service needs to be employed to obtain a travel map. Suppose that two optional services can be considered for this purpose. One service S1 can provide a street map at a price of 6.72. The other service S2 can provide a tourist map at a price of 16.87. Because in our DAG a tourist map is more desirable than a street map, service S2 clearly enjoys better semantic matchmaking quality but will have negative impact on the QoS of the DAG (i.e. the price is much higher). It can be easily imagined that similar problems can frequently occur while building the DAG for the travel planning problem or other web service composition problems. Due to this reason, aimed at achieving a good balance in between QoS and semantic matchmaking quality, our PSO-based service composition system will be further guided by a comprehensive quality model to be proposed in 4.

\subsection{Problem Formulation}\label{problemDes}

We herein give formal definitions of the concepts regarding the semantic web service composition problem utilised in our approach, and these concepts are captured in several models as follows.

\textbf{Semantic Web Service Model}. The semantic web service model represents web services with functional descriptions, and how interoperability of web services enables matchmaking for automatically generating composition solutions.

\textbf{Definition 1.} A request from users is defined as a composition task in a tuple: $Comp.T = \{I_{T}, O_{T}\}$ by giving a set of task inputs $I_{T}$ and expecting  a set of desired task outputs $O_{T}$, where $I_{T}$ and $O_{T}$ are associated with related concepts $I^{C}_{T}$ and $O^{C}_{T}$ respectively in an ontology $O = \{ C \mid I^{C}_{T}, O^{C}_{T}  \subseteq C \}$.

\textbf{Definition 2.} A semantic web service (hereafter "service") is defined as a tuple $S = \{ I_{S}, O_{S}, QoS_S \}$ $\in$ $\mathcal{SR}$, where $I_{S}$ is a set of service inputs that must be satisfied to invoke $S$, and $O_{S}$ is a set of service outputs returned by the execution of $S$. $I_{S}$ and $O_{S}$ are concept-related instances that are linked to their corresponding concepts $I^{C}_{S}$ and $O^{C}_{S}$, where $ I^{C}_{S}, O^{C}_{S}  \subseteq C$. $QoS_S = \{ t_s, c_s, r_s, a_s, ... \} $ is a set of non-functional attributes of $S$, it refers to response time $t_s$, cost $c_s$, reliability $r_s$, and availability $a_s$ \cite{zeng2003quality}. $\mathcal{SR}$ is a service repository consisting of a set of $S$.
\vspace{0.3cm}

\textbf{Semantic Matchmaking Model}. The mechanism to compose web services relies on the semantic descriptions of inputs and outputs, which enable inputs of a service to be matched by outputs of another. To measure the quality of these matches, we utilise different matchmaking types (\textit{exact, plugin subsumes and fail} \cite{paolucci2002semantic} ).

\textbf{Definition 3.} Given $a, b \in C$, $type(a, b)$ returns the matchmaking types of two concepts, and this matchmaking type is determined by the logic relationship described in the $O$. If both $a$ and $b$ are equivalent, $exact$ type ($a \equiv b$) is returned. If the concept of $a$ is a sub-concept of the concept of $b$ type ($a \sqsubseteq b$) is returned. If the concept of $a$ is a super-concept of the concept of $b$, $subsumes$ type ($a \sqsupseteq b$) is returned. If none of previous matchmaking types are returned, $fail$ type ($a \perp b$) is returned.

We use $type(a, b)$ to define a full matchmaking considered in the scenario of connecting two services through concept-related output and concept-related input.

\textbf{Definition 4.} Given $(a \in O^{C}_{S_m}) \vee (b \in I^{C}_{S_n}) \wedge (m \neq n) $, a $full match(a \Rightarrow b)$ holds if $type(a, b)$ returns $exact$ or $plugin$. The operator ``$ \Rightarrow$'' means $a$ is passed to $b$, and $b$ is fully satisfied by $a$. The full match is a guarantee of completely valid  ``$ \Rightarrow$'' operation, whereas, partial matches are not considered in this paper.
\vspace{0.3cm}

\textbf{QoS calculation Model in a DAG}
Four most often considered QoS parameters \cite{zeng2003quality} are response time, cost, reliability and availability described as follows: \textit{Response time} ($t_s$) measures the expected delay in seconds between the moment when a request is sent and the moment when the results are received.\textit{Cost} ($c_s$) is the amount of money that a service requester has to pay for executing the web service. \textit{Reliability} ($r_s$) is the probability that a request is correctly responded within the maximum expected time frame, which is expressed as a number between 1 and 0. \textit{Availability} ($a_s$) is the probability that a web service is accessible, which is expressed in the same way as $r_s$. The aggregation value of QoS in a DAG respect to the DAG's structures that determine how services associated with each other in a service composition. The QoS calculation models are described based on QoS aggregation method \cite{da2015graphevol} as follows:


$A$, $R$, $C$, $T$ is aggregated $a_s$, $r_s$, $c_s$ and $t_n$ respectively with a given $WG$, where  $\{S_1, S_2, ... S_n\} \subset V$, such that: $A=\prod\limits^n_{k=1}a_k
$; $R=\prod\limits^n_{k=1}r_k$; $C=\sum\limits^n_{k=1}c_k$; $T$ is the time of most time-consumption path of $WG$, so $T = MAX \{timePath()_n |n\in\{1,\ldots,m\}\}$ where $m$ is the number of $WG$ path, and $timePath() = \sum\limits^j_{k=1}t_k$, where $j$ is the number of services involved this path.

\section{Comprehensive Quality Model}\label{Comprehensive_Quality_Model}

In this section, we propose a general comprehensive quality model in considering semantic matchmaking quality and QoS simultaneously. This comprehensive model is fully supported by the representations of service composition discussed in this paper, as a weighted DAG model formulated in this section.




\subsection{Comprehensive Quality Model}\label{qualityModel}

\textbf{Semantic matchmaking quality model}. Due to that the discretisational characteristics of different match types and values assigned to matching types driven by the cost of data manipulation \cite{lecue2009optimizing}, match types are considered to be one factor for the quality of matchmaking. For example, Exact matching type demands less time for computation compared to that of Plugin match. Another factor is concept similarity of two matched concepts. For example, two plugin types, $publication \sqsubseteq printedmaterial$ and $romanticnovel \sqsubseteq printedmaterial$, are associated with different similarities.

\textbf{Definition 5.} Given $full match(a \Rightarrow b)$, $sim(a, b)$ is a function that given a output-related concept $a$ of a service and a input-related concept $b$ of another service, it returns a concept similarity value between $a$ and $b$.

The $sim(a, b)$ is calculated based on the edge counting method defined in the formula (\ref{equation1}) from \cite{shet2012new}, where $N_1$, $N_2$ and $N$ measure the distances from an output-related concept $a$, an input-related concept $b$, a closest common ancestor of these two matched $a$ and $b$ to the top concept of an ontology $O$ respectively. $\lambda$ is set to 0 as we do not measure the similarities of neighbourhood concepts, which is not the matching type considered in this paper. 

\begin{equation}
sim(a, b){=} \frac{2N \cdot e^{-\lambda L/D} }{N_{1}+N_{2}}
\label{equation1}
\end{equation}

\textbf{Definition 6.} Given $full match(a \Rightarrow b)$, $sm(a,b)$ is a function for measuring semantic matchmaking quality between two concepts, which returns a pair of values consisting of $type(a, b)$ and $q_{sim}(a, b)$ defined in Formula (\ref{equation2}).


\begin{equation}
\label{equation2}
sm(a, b) \stackrel{.}{=} ( type(a, b), \  sim(a, b) )
\end{equation}

\textbf{Weighted DAG composition model}. web service composition is considered to be a data workflow, where services are chained together by their inputs and outputs using the two models defined before. All these concepts are captured and tackled in a weighted DAG as $WG = (V, E)$ , where:

$V=\{Start, S1, S2...Sn, End\}$ is a set of services, where $Start$ and $End$ are two special services defined as $Start = \{ \phi, I_T, \phi \}$ and $End  = \{ O_T, \phi, \phi \}$. 

$E = \{e_{1}, e_{2},... e_{m} \}$ is a set of edges, where each edge has a set of incoming outputs $O_{S_{src}}$ from source service $S_{src}$ and a set of outgoing inputs $I_{S_{tar}}$ from target service $S_{tar}$. 

$e = \{ (O_{S_{src}} \cup I_{S_{src}}) \mid \forall o \in O_{S_{src}}, \exists i \in O_{S_{src}} \wedge fullmatch (o \Rightarrow i) \}$
\vspace{0.3cm}

\textbf{Comprehensive quality model in a weighted DAG}. 

Since each $e$ defined in $E$ could have more than one $fullmatch(a \Rightarrow b)$ form a edge. Therefore, semantic matchmaking quality of one edge, denoted as $sm_e$ is defined in formula (\ref{equation3}), where $type_{e}$ and $sim_{e}$ are the average values of all involved $type(a, b)$ and $q_{sim}(a, b)$ respectively. 

\begin{equation}
\label{equation3}
sm_{e} \stackrel{.}{=} (type_ {e}, \  sim_ {e})
\end{equation}

The semantic matchmaking quality $SM$ is further aggregated with considering all $\{e_{1}, e_{2},... e_{m} \}$ in $E$, calculated by following the formula (\ref{eqSM})(\ref{equation6})(\ref{equation7}). Consequently, in Formula \ref{eqCQ}, the comprehensive quality $CQ$ consists of the aggregated semantic matchmaking quality $SM$ and the QoS calculation in DAG discussed before.

\begin{equation}
\label{eqSM}
SM \stackrel{.}{=} (MT, SIM)
\end{equation}
\begin{equation}
\label{equation6}
MT {=} \prod_{n=1}^{m} type_ {e_{n}}
\end{equation}
\begin{equation}
\label{equation7}
SIM {=} (\sum_{n=1}^m sim_ {e_{n}})/m
\end{equation}
\begin{equation}
\label{eqCQ}
CQ \stackrel{.}{=} (MT, \  SIM, \  A,\  R,\  C,\  T)
\end{equation}



\subsection{Objective Function}
In real life, given a unique and optimised solution is always easier for customers to pick up directly when many quality criteria involved into decision making, rather than provided a set of solutions. It is very practical to define a single fitness as a weighted sum of all the quality related components in Formula (\ref{equation8}). Note that weights can be adjusted according to users' preferences. The function value of 1 means the best comprehensive quality and 0 means the worst. For this purpose, $MT$, $S$, $A$, $R$, $T$, and $C$ must be normalised so that the function value falls within the range from 0 to 1 using Formula (\ref{equation9}) and (\ref{equation10}), where the maximum and minimum value of $A$, $R$, $T$, and $C$ are calculated by all web services candidates to the composition task, which are generated by a greedy search discussed in \ref{PSO_based_approach}. $MT$ and $S$ are using a bound from 0 to 1. Therefore, the composition task is try to find maximised value of objective function associated to the solutions.

\vspace{-0.2cm}
\begin{equation}
\label{equation8}
Fitness = w_1 \hat{MT} + w_2 \hat{S} + w_3 \hat{A} + w_4 \hat{R} + w_5(1 - \hat{T}) + w_6(1 - \hat{C})
\end{equation}
\noindent where $\sum_{i=1}^{6} w_i = 1$
\\
\vspace{-0.2cm}
\begin{equation}
\label{equation9}
\hat{Q_k} = 
\begin{cases}
	\frac{Q_k - Q_{k, min}}{Q_{k, max} - Q_{k, min}} & \text{ if }Q_{k, max} - Q_{k, min} \neq 0.\\
	1 & \mathrm{ otherwise}.
\end{cases}
\end{equation}
\noindent where $k$ $=$ $1$, $2$, $3$, and $4$, where $Q_1$ is $MT$, $Q_2$ is $S$, $Q_3$ is $A$, and $Q_4$ is $R$.
\begin{equation}
\label{equation10}
\hat{Q_j} = 
\begin{cases}
	\frac{Q_{j,max} - Q_j}{Q_{j, max} - Q_{j, min}} & \text{ if }Q_{j, max} - Q_{j, min} \neq 0.\\
	1 & \mathrm{ otherwise}.
\end{cases}
\end{equation}
\noindent where $j$ $=$ $1$, and $2$, where $Q_1$ is $T$ and $Q_2$ is $C$.


Our comprehensive quality evaluation model is considered to be more general. Two semantic matchmaking types (Exact and Plugin) are considered for discovering desired web service in recent QoS-aware web service composition  \cite{ma2015hybrid,da2016particle,da2015graphevol}, but there are no measurements of matchmaking types and concept similarities in their approaches. Consequently, weights for $MT$ and $S$ are considered to be 0 in our proposed comprehensive evaluation model, it turns to be a widely used QoS evaluation model in \cite{ma2015hybrid,da2016particle,da2015graphevol}.


\section{PSO-based Approach to Comprehensive Quality-Aware Automated Semantic Web Service Composition}\label{qswsc_approach}

\begin{figure}[h]
\centering
\fbox{\includegraphics[scale=.4]{overview.pdf}}
 \caption{An overview of POS-based approach to comprehensive quality-aware automated semantic web service composition.}
 \label{overview}
\end{figure}


\subsection{An Overview to PSO-based Method}\label{PSO_based_approach}

PSO has shown promise in solving combinatorial optimisation problems, and considered an easier way to maintain the correctness of solutions compared to GP-based approaches that often require repairing the solutions \cite{da2016particle}. Therefore, we employ a PSO-based approach to comprehensive quality-aware automated semantic web service composition. Fig. \ref{overview} shows an overview of our approach consisting of four steps: 

Step 1: The composition process is triggered by a composition task, which is clearly defined in \ref{problemDes}. 

Step 2: This composition task is used to discover all task-related service candidates using a greedy search adopted from \cite{ma2015hybrid}. This greedy search algorithm keeps adding outputs of the invoked services as available outputs (initialised with $I_{T}$) , and these available outputs are used to discover task-related services from a service repository and updated with the outputs of these discovered services. This operation is repeated until no service is satisfied by the available outputs. This greedy search contributes to a shrunken service repository. During the greedy search, an ontology-based cache ($cache$) is initialised that stores the concept similarities of potentially matched inputs and outputs of task-related candidates. This $cache$ is also used to check whether services can be invoked by satisfying their input-related concepts with provided output-related concepts.

Step 3 and Step 4: These two steps follow the standard PSO steps \cite{shi2001particle} except for some differences in particles mapping and decoding processes. In particular, these two differences are related to sorting a created service queue using serivce-to-index mapping for a particle' position vectors and evaluating the fitness of a particle after decoding this serivce queue into a weighted DAG respectively. Those differences are further addressed in Algorithms \ref{novelSteps} and \ref{graph_building} in \ref{POS-based_algomargin}.

\subsection{PSO-based approach algorithm}\label{POS-based_algomargin}
The overall algorithm investigated here is made up of a PSO-based web service composition algorithm \ref{novelSteps} and a decoding algorithm \ref{graph_building}. In Algorithm \ref{novelSteps}, the  steps $4$, $5$, $6$ and $7$ are different from those of stardard PSO: In step 4, the size of task-related service candidates generated by a greedy search determines the size of each particle's position, and each candidate in a created service candidates queue is mapped to an index of a particle’s position vectors, where each vector has a weight value between 0.0 and 1.0. In step 5, all the task-related service candidates in the queue are sorted according to their corresponding weight values in descending order. In step 6, this sorted queue is used as one of the inputs of the forward decoding algorithm \ref{graph_building} to create a weighted DAG. In step 7, this fitness value of this weighted DAG is the fitness value of the particle calculated by the comprehensive model discussed in \ref{Comprehensive_Quality_Model}.
\begin{algorithm}
 %\LinesNumbered
 \SetKwInOut{Input}{Input}\SetKwInOut{Output}{Output}
 \SetKwFunction{generateWeightedGraph}{generateWeightedGraph}
 \SetKwProg{Procedure}{Procedure}{}{}
 \SetNlSty{}{}{:}
 Randomly initialise each particle in the swarm\;
  \While {max. iterations not met}{
     \ForEach{particles in the swarm}{
     Create a service candidates queue and map service candidates to a particle's position vectors\;
     Sort the service queue by position vectors' weights\;
     Create a weighted DAG from the service queue ( Algorithm\ref{graph_building}) \;
     Calculate the Weighted DAG fitness value\;
     
      \eIf{fitness value better than \emph{pBest}}{    
        Assign current fitness as new \emph{pBest}\;
       }{
        Keep previous \emph{pBest}\;
       }	
     }
    Assign best particle's \emph{pBest} value to \emph{gBest}, if better than \emph{gBest}\;
 	Calculate the velocity of each particle\;
  	Update the position of each particle\;
  }
\caption{Steps of PSO-based service composition technique \cite{da2016particle}.}
\label{novelSteps}
\end{algorithm} 


Algorithm  \ref{graph_building} is a forward graph buidling algorithm based on \cite{blum1997fast}. This algorithm take one input, a sorted service queue from step 5 of Algorithm \ref{novelSteps}. If service queues are sorted resulting in different service order, it is possible to create different corresponding weighted DAGs as composition solutions. In addition. $I_{T}$, $O_{T}$ and $cache$ are also taken as the inputs. Firstly, $Start$ and $End$ are added to $V$ of $WG$ as an initialisation, and $OutputSet$ is also created with $I_{T}$.  If all the inputs $I_{S}$ of the first popped  $S$ from $queue$ can be satisfied by provided outputs from $OutputSet$. This $S$ is added to $V$ and its outputs are added to $OutputSet$, and $S$ is removed from $queue$. Meanwhile, $e$ is created with its $sm_{e}$ calculated based on the aggregation value of all semantic matchmaking qualities from each satisfied input of $S$. These steps are repeated until all  $O_{T}$ can be satisfied by $Outputset$ or the service queue is $null$. Consequently, this forward graph building technique could lead to more services and edges connected to the $WG$, which should be removed before $WG$ is returned.

\begin{algorithm}
 \SetKwInOut{Input}{Input}\SetKwInOut{Output}{Output}
 \SetKwFunction{createWeightedDAG}{createWeightedDAG}
 \SetKwProg{Procedure}{Procedure}{}{}
 %\LinesNumbered
 \SetNlSty{}{}{:}
  \Procedure{\createWeightedDAG{}}{
 \Input{ $I_T$, $O_T$, $queue$, $Cache$}
 \Output{WG}
 $WG = (V, E)$\;
 $V \leftarrow$ \{$Start$, $End$ \} \;
 $OutputSet \leftarrow$ \{$I_{T}$\}\;
  \While { all $O_{T}$ do not satisfied by $OutputSet$}{
     \ForEach{$S$ in $queue$}{
      \uIf{all $I_{S}$ satisfied by $OutputSet$}{    
    		 \ForEach{$I_{S}$}{
		$sm(a \in Outputset, b \in I_{S}) \leftarrow$ query $Cache$\;
              }
        $e \leftarrow$ calculate aggregated $sm_{e}$\;
        $E$ add $e$\;
        $V$ add $S$\;
        $OutputSet$ add \{$O_{S}$\}\;    
        $queue$.remove $S$\;
       }	
     }
  }
 remove $dangling nodes$\; 
 remove $dangling edges$\;
 \KwRet $WG$\;
 }
 \caption{Create a weighted DAG from a  sorted queue.}
\label{graph_building}
\end{algorithm} 


\section{Experiment Study}\label{experiment_design}
In this section, a quantitative evaluation approach is adopted in our experiment design. Two objectives of this evaluation are to: $(1)$ measure the effectiveness of our PSO-based approach. To do this, we compare our PSO-based method with one existing GP-based approach \cite{ma2015hybrid}. $(2)$ measure the effectiveness of our proposed comprehensive quality model. To do this, we compare a widely used QoS model in QoS-aware web service composition \cite{ma2015hybrid,da2016particle,da2015graphevol} with our comprehensive quality model using our proposed PSO-based approach.

An augmented version of Web service challenge 2009 (WSC09) used in \cite{ma2015hybrid,da2016genetic} including QoS attributes is used for our experiment. WSC09 is a benchmark dataset consisting of five composition tasks that associated with an increasing number of services, and concepts in ontologies. 

The parameters are chosen based on the settings from \cite{shi2001particle} for our PSO-based approach, In particular, PSO population size is 30 with 100 generations. We run 30 times independently for each dataset. We configure weight of fitness function to properly balance functional side and nonfunctional side. Therefore, $w_{1}$ and $w_{2}$ are set equally to 0.25, and $w_{3}$, $w_{4}$, $w_{5}$, $w_{6}$ are all set to 0.125. The returned value of $type(a,b)$ is set to 1 ($Exact$) and 0.75 ($Plugin$) according to \cite{lecue2009optimizing}. In general, weight settings and parameter match type quality are decided by users' preferences.

\subsection{Comparison Test for GP-based approach and PSO-based approach}\label{comparisonTestWithGP}
To evaluate the effectiveness of our proposed PSO-based approach, we compare one recent GP-based approach \cite{ma2015hybrid} with our PSO-based method. The semantic matchmaking quality of this GP-based approach is easy to evaluated considering measuring links between parent nodes and children nodes. Therefore, we evaluate both semantic matchmaking quality and QoS simultaneously for that GP-based approach using the proposed comprehensive quality model. To make a fair comparison, we consider the same number of evaluations (3000 times) used in our PSO-based approach. We set the parameters' settings of that GP-based approach as 30 individuals and 100 generations, it is considered to be proper settings refering to \cite{da2015gp}.

The first column of Table \ref{meanFitness} shows five tasks from WSC09 Dataset. The second and third column of Table \ref{meanFitness} show the orginal service repository size before the greedy search and shrunk service repository size after the greedy search respectively regarding the five tasks. This greedy search helps reducing the repository size by considering only task-related service candidates, which also contributes to a significant reduced researching space. The fourth and fifth column of Table \ref{meanFitness} show the mean fitness values of 30 independent runs accomplished by two methods. We employ independent-samples T tests to test the significant differences in mean fitness value. The results show that the PSO-based approach outperformes the existing GP-based approach in most cases except task 3 (all the p-values are consistently smaller than 0.01). In task 5, PSO-based approach performs significantly better than GP-based approach, It may refer to that GP-based approach is stuck in local optimal solutions for very large searching space. 

\begin{table}[]
\centering
\caption{Mean fitness results for comparing GP-based approach}
\label{meanFitness}
\begin{tabular}{l|l|l|l|l}
\hline
\multicolumn{1}{c|}{WSC09} &Original $SR$  &Shrunken $SR$   &PSO-based approach & GP-based approach  \\ \hline
Task 1                     &572            &80    &0.5592 $\pm$ 0.0128  $\uparrow$  &0.5207 $\pm$ 0.0208           \\ \hline
Task 2                     &4129           &140   &0.4701 $\pm$ 0.0011  $\uparrow$  &0.4597 $\pm$ 0.0029          \\ \hline
Task 3                     &8138           &153   &0.5504 $\pm$ 0.0128              &0.5679 $\pm$ 0.0234 $\uparrow$   \\ \hline
Task 4                     &8301           &330   &0.4690 $\pm$ 0.0017  $\uparrow$  &0.4317 $\pm$ 0.0097            \\ \hline
Task 5                     &15211          &237   &0.4694 $\pm$ 0.0008  $\uparrow$  &0.2452 $\pm$ 0.0369            \\ \hline
\end{tabular}
\end{table}



\subsection{Comparison Test for Comprehensive Quality Evaluation Model and QoS Evaluation Model}\label{comparisonTest}

A recent widely used QoS Evaluation Model, $Fitness = w_1 \hat{A} + w_2 \hat{R} + w_3(1 - \hat{T}) + w_4(1 - \hat{C})$, where $\sum_{i=1}^{4} w_i = 1$, is used for QoS-aware web service composition \cite{ma2015hybrid,da2016particle,da2015graphevol}. We employ this QoS evluation model and our proposed comprehensive quality evluation model using our proposed PSO-based approach for searching for optimal solutions.
To analyse the differences in optimal solutions found by these two evaluation model, we recorded and compared the different mean values of $SM$ (consisiting of $MT$ and $S$), $QoS$(consisting of $A$, $R$, $T$ and $C$) at the 100th generation of 30 runs. To make a sense of the comparison, all these recorded values are normalised from 0 to 1, and compared using statistical analysis in in Table \ref{decisionTable}. 

We observe an interesting pattern from Table \ref{decisionTable}. The mean values of $QoS$ using QoS evaluation model are significantly higher than those using comprehensive quality evaluation model for Task 2, 3, 4 and 5,  but the mean value of $SM$ using comprehensive quality evaluation model are consistently significantly higher than those using QoS evaluation model for all tasks with a slight trade-off in $QoS$.

\begin{table}[]
\footnotesize
\centering
\caption{Mean values of $SM$ and $QoS$ for QoS evaluation model and comprehensive quality evaluation model using PSO-based approach}
\label{decisionTable}
\begin{tabular}{l|l|l|l}
\hline
\multicolumn{2}{c|}{WSC09}              & QoS Evaluation Model         &\shortstack{Comprehensive Quality \\ Model} \\ \hline
\multirow{2}{*}{Task1}  &$SM$   &0.5373 $\pm$ 0.0267               &0.5580 $\pm$ 0.0094 $\uparrow$ \\ \cline{2-4}
                        &$QoS$  &0.5574 $\pm$ 0.0156               &0.5604 $\pm$ 0.0164                          \\ \hline
\multirow{2}{*}{Task2}  &$SM$   &0.4549 $\pm$ 0.0033               &0.4630 $\pm$ 0.0042 $\uparrow$ \\ \cline{2-4} 
                        &$QoS$  &0.4800 $\pm$ 0.0012 $\uparrow$    &0.4772 $\pm$ 0.0025 \\ \hline
\multirow{2}{*}{Task3}  &$SM$   &0.5538 $\pm$ 0.0082               &0.6093 $\pm$ 0.0054 $\uparrow$   \\ \cline{2-4} 
                        &$QoS$  &0.4940 $\pm$ 0.0013 $\uparrow$    &0.4913 $\pm$ 0.0009            \\ \hline
\multirow{3}{*}{Task4}  &$SM$   &0.4398 $\pm$ 0.0037               &0.4604 $\pm$ 0.0000 $\uparrow$ \\ \cline{2-4} 
                        &$QoS$  &0.4845 $\pm$ 0.0010 $\uparrow$    &0.4734 $\pm$ 0.0044  \\ \hline
\multirow{3}{*}{Task5}  &$SM$   &0.4580 $\pm$ 0.0065               &0.4639 $\pm$ 0.0013 $\uparrow$           \\ \cline{2-4} 
                        &$QoS$  &0.4764 $\pm$ 0.0005 $\uparrow$    &0.4750 $\pm$ 0.0007  \\ \hline                                                   
\end{tabular}
\end{table}

\subsection{Further Discussion}\label{discuss1}


To better understand a better semantic matchmaking quality with a slight trade-off in the opitmal solutions using comprehensive quality evaluation model, we demonstrate the optimal solutions using task 3 as an example. Fig. \ref{comparisontest} $(1)$ and $(2)$ show two weighted DAGs as best solutions found by employing QoS evaluation model and comprehensive quality evaluation model respectively. Two approaches generate exactly the same service workflow structure, but some service vertices and edges denoted in red are different. To better understand these differences, we list the overall semantic matchmaking quality $SM$,  overall $QoS$ and semantic matchmaking quality associated to each edge ($sm_{e_1}$ to $sm_{e_4}$) for the two weighted DAGs in Fig. \ref{comparisontest} $(3)$, where $\Delta Q$ reveals the gain (positive $\Delta Q$) or a loss (negative $\Delta Q$) for the listed qualities using our comprehensive quality evalutaion model. Therefore, an overall gain 0.1433 is calculated from a sum of a $SM$ gain (0.1467) and $QoS$ loss (-0.0034). Consequently, our comprehensive evaluation model acheive a desirable trade-off in considering both $SM$ and $QoS$. To explain the value of $SM$ gain, we pick up $e_4$ that is associated with a smallest $\Delta Q$. The $e_4$ of $WG(1)$ using QoS evaluation model and $WG(2)$ using comprehensive quality model has two different source service vertices $Ser1640238160$ and $Ser947554374$ respectively,  and the same $end$ vertices. $Ser1640238160$ and $Ser947554374$ are services with concept-related output parameters $Inst795998200$ and $Inst582785907$ corresponds to two concepts $Con103314376$ and $Con2037585750$ respectively, which are marked on the related taxonomy in Fig. \ref{comparisontest} $(4)$. In addtion, $Inst658772240$ is a required parameter of the $end$ vertice as one of composition task outputs, which is related to concept $Con2113572083$. There exist $Inst582785907$ $\in$ $Con2037585750$ $\sqsubseteq_{3}$ $Inst658772240$ $\in$ $Con2113572083$ for $e_4$ in $WG(1)$ and $Inst795998200$ $\in$ $Con103314376$ $\sqsubseteq_{2}$ $Inst658772240$ $\in$ $Con2113572083$ for $e_4$ in $WG(2)$. Therefore, 2-level Subsumes is closer than 3-level Subsumes, $Inst795998200$ is closer to user's required output $Inst658772240$ compared with $Inst582785907$.

\begin{figure}[h]
\centering{
\fbox{
\includegraphics[scale=.29]{comparisontest.pdf}}}
 \caption{An example of comparision to optimal solutions using Task 3 for QoS evaluation model and comprehensive evluation model.}
 \label{comparisontest}
\end{figure}


\section{Conclusion}\label{conclusion}
This work introduces a general comprehensive evaluation model for considering semantic matchmaking quality and QoS simultaneously. We proposed a PSO-based service composition approach utilising our proposed quality mode that can achieve a desired trade-off of both quality aspects. In addtion, we compare one recent GP-approach with our PSO-based method to show our performance that results in finding more optimised solutions. Future works can investigate multi-objective EC techniques to produce a set of composition solutions for the situations when the quality preference is not known.


\bibliographystyle{splncs03}
\bibliography{IEEEexample}

\end{document}